import { useMemo, useRef, useEffect, useCallback } from 'react';

function doesIdentifierMatchKeyboardEvent(e, identifier) {
    if (e.key === identifier ||
        e.code === identifier ||
        e.keyCode === identifier ||
        e.which === identifier ||
        e.charCode === identifier) {
        return true;
    }
    return false;
}

const defaultOptions = {
    when: true,
    eventTypes: ["keydown"]
};
/**
 * useKey hook
 *
 * Fires a callback on keyboard events like keyDown, keyPress and keyUp
 *
 * @param {[string|number]} keyList
 * @param {function} callback
 * @param {Options} options
 */
function useKey(input, callback, opts) {
    const keyList = useMemo(() => {
        if (Array.isArray(input)) {
            return input;
        }
        else {
            return [input];
        }
    }, [input]);
    const options = Object.assign({}, defaultOptions, opts);
    const { when, eventTypes } = options;
    const callbackRef = useRef(callback);
    let { target } = options;
    useEffect(() => {
        callbackRef.current = callback;
    });
    const handle = useCallback((e) => {
        if (keyList.some(identifier => doesIdentifierMatchKeyboardEvent(e, identifier))) {
            callbackRef.current(e);
        }
    }, [keyList]);
    useEffect(() => {
        if (when && typeof window !== "undefined") {
            const targetNode = target ? target.current : window;
            eventTypes.forEach(eventType => {
                targetNode && targetNode.addEventListener(eventType, handle);
            });
            return () => {
                eventTypes.forEach(eventType => {
                    targetNode && targetNode.removeEventListener(eventType, handle);
                });
            };
        }
    }, [when, eventTypes, keyList, target, callback]);
}

export default useKey;
//# sourceMappingURL=index.esm.js.map
