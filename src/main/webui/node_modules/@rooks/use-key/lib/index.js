(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
  typeof define === 'function' && define.amd ? define(['react'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.useKey = factory(global.React));
}(this, (function (react) { 'use strict';

  function doesIdentifierMatchKeyboardEvent(e, identifier) {
      if (e.key === identifier ||
          e.code === identifier ||
          e.keyCode === identifier ||
          e.which === identifier ||
          e.charCode === identifier) {
          return true;
      }
      return false;
  }

  const defaultOptions = {
      when: true,
      eventTypes: ["keydown"]
  };
  /**
   * useKey hook
   *
   * Fires a callback on keyboard events like keyDown, keyPress and keyUp
   *
   * @param {[string|number]} keyList
   * @param {function} callback
   * @param {Options} options
   */
  function useKey(input, callback, opts) {
      const keyList = react.useMemo(() => {
          if (Array.isArray(input)) {
              return input;
          }
          else {
              return [input];
          }
      }, [input]);
      const options = Object.assign({}, defaultOptions, opts);
      const { when, eventTypes } = options;
      const callbackRef = react.useRef(callback);
      let { target } = options;
      react.useEffect(() => {
          callbackRef.current = callback;
      });
      const handle = react.useCallback((e) => {
          if (keyList.some(identifier => doesIdentifierMatchKeyboardEvent(e, identifier))) {
              callbackRef.current(e);
          }
      }, [keyList]);
      react.useEffect(() => {
          if (when && typeof window !== "undefined") {
              const targetNode = target ? target.current : window;
              eventTypes.forEach(eventType => {
                  targetNode && targetNode.addEventListener(eventType, handle);
              });
              return () => {
                  eventTypes.forEach(eventType => {
                      targetNode && targetNode.removeEventListener(eventType, handle);
                  });
              };
          }
      }, [when, eventTypes, keyList, target, callback]);
  }

  return useKey;

})));
//# sourceMappingURL=index.js.map
